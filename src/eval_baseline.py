from sentence_transformers import SentenceTransformer, util
from huggingface_hub import InferenceClient
import rapidfuzz
import google.generativeai as genai
import json
import openai
import requests
import argparse
import os
import re

model = SentenceTransformer('paraphrase-multilingual-MiniLM-L12-v2')

def match_keys(gold_keys, pred_keys):
    # Fuzzy matching ключей
    matches = {}
    for gk in gold_keys:
        best_match = None
        best_score = 0
        for pk in pred_keys:
            score = rapidfuzz.fuzz.ratio(gk, pk)
            if score > best_score:
                best_score = score
                best_match = pk
        # if best_score > 80:  # порог можно подобрать
        matches[gk] = best_match
    return matches

def evaluate_key_matching(gold, pred):
    gold_keys = list(gold.keys())
    pred_keys = list(pred.keys())
    if not pred_keys:
        return 0.0
    matches = match_keys(gold_keys, pred_keys)
    print(f"Key matches: {matches}")
    scores = []
    for gk, pk in matches.items():
        emb_gold = model.encode(gold[gk], convert_to_tensor=True)
        emb_pred = model.encode(pred[pk], convert_to_tensor=True)
        sim = util.pytorch_cos_sim(emb_gold, emb_pred).item()
        scores.append(sim)
    return sum(scores) / len(scores) if scores else 0.0

def evaluate_description_matching(gold, pred):
    matches = {}
    scores = []
    for gk, gv in gold.items():
        best_match = None
        best_score = 0
        for pk, pv in pred.items():
            if not isinstance(pv, str):
                print(f"Skipping non-string prediction value for key '{pk}': {pv}")
                pv = ""
            emb_gold = model.encode(gv, convert_to_tensor=True)
            emb_pred = model.encode(pv, convert_to_tensor=True)
            score = util.pytorch_cos_sim(emb_gold, emb_pred).item()
            if score > best_score:
                best_score = score
                best_match = pk
        matches[gk] = best_match
        scores.append(best_score)
    print(f"Description matches: {matches}")
    return sum(scores)/len(scores) if scores else 0.0

def calculate_scores(gold, pred):
    key_matching_scores = [evaluate_key_matching(gold[i], pred[i]) for i in range(len(gold))]
    description_matching_scores = [evaluate_description_matching(gold[i], pred[i]) for i in range(len(gold))]
    return key_matching_scores, description_matching_scores

# Загрузка датасета
# Проверяем, что мы находимся в корневой папке illustory
current_dir = os.getcwd()
if not current_dir.endswith('illustory'):
    raise RuntimeError(f"Скрипт должен запускаться из корневой папки illustory. Текущая папка: {current_dir}")

# Проверяем наличие необходимых файлов и папок
required_files = [
    './data/eho_sudbi.json',
    './src/eval_baseline.py'
]

for file_path in required_files:
    if not os.path.exists(file_path):
        raise FileNotFoundError(f"Не найден необходимый файл: {file_path}")

print(f"✓ Корневая папка определена: {current_dir}")
print("✓ Необходимые файлы найдены")

with open('./data/eho_sudbi.json', 'r', encoding='utf-8') as f:
    scenes = json.load(f)

# Формирование кумулятивных текстов и эталонных описаний
cumulative_texts = []
gold_descriptions = []
current_text = ""
for scene in scenes:
    current_text += scene["Текст"] + "\n"
    cumulative_texts.append(current_text.strip())
    gold_descriptions.append(scene["ВизуальноеОписание"])

INSTRUCTION = """
Ты помощник, который извлекает ИСКЛЮЧИТЕЛЬНО визуальные описания (то что важно будет знать художнику-иллюстратору) из текста и **возвращает их СТРОГО в формате JSON, без какого-либо дополнительного текста или пояснений**. JSON должен содержать пары ключ-значение, где ключ - это имя или объект, а значение - его визуальное описание. Тебе на вход подаётся некоторый префикс книги. а тебе нужно извлечь из нее актуальные визуальные описания персонажей/объектов/мест вокруг которых на момент конца фрагмента разворачивается действие/сцена. Учти что, к примеру, если возраст некоторого персонажа указан лишь в начале книги, и в последней сцене персонаж принимает участие, описывая его, нужно обязательно написать его возраст. Визуальные описания могут меняться по ходу повествования, нужно извлекать актуальные.

Пример входа:
Много лет спустя, перед самым расстрелом, полковник Аурелиано Буэндия припомнит тот далекий день, когда отец повел его поглядеть на лед.
Макондо был тогда небольшим поселком из двадцати глинобитных, с камышовыми кровлями домишек, стоявших на берегу реки, которая несла свои прозрачные воды по ложу из белых, гладких и огромных, как доисторические яйца, валунов. Мир был таким первозданным, что многие вещи не имели названия и на них просто тыкали пальцем. Каждый год в марте месяце лохмотное цыганское племя ставило свой шатер близ поселка, и под звонкое дребезжание бубнов и визготню свистулек пришельцы показывали жителям новейшие изобретения. Вначале они привезли магнит. Коренастый цыган с кудлатой бородой и воробьиными руками-лапками назвал свое имя – Мелькиадес – и стал демонстрировать обомлевшим зрителям не что иное, как восьмое чудо света, сотворенное, по его словам, учеными-алхимиками из Македонии. Цыган ходил из дома в дом, потрясая двумя брусками железа, и люди вздрагивали от ужаса, видя, как тазы, кастрюли, жаровни и ухваты подпрыгивают на месте, как поскрипывают доски, с трудом удерживая рвущиеся из них гвозди и болты, а вещицы, давным-давно исчезнувшие, объявляются именно там, где все было перерыто в их поисках, и скопом несутся к волшебному железу Мелькиадеса. «Всякая вещь – живая, – объявил цыган категорично и сурово. – Надо только суметь разбудить ее душу». Хосе Аркадио Буэндия, чье необузданное воображение превосходило чудотворный гений самой природы и даже силу магии и волшебства, подумал, что неплохо было бы приспособить это в общем никчемное открытие для выуживания золота из земли. Мелькиадес, будучи человеком порядочным, предупредил: «Ничего не получится». Но Хосе Аркадио Буэндия тогда еще не верил в порядочность цыган и променял своего мула и нескольких козлят на две намагниченные железки. Урсула Игуаран, его жена, хотела за счет домашней скотины увеличить скромный семейный достаток, но все ее уговоры были напрасны. «Скоро золотом дом завалим, девать будет некуда», – отвечал муж. Несколько месяцев кряду он усердно отстаивал неопровержимость своих слов. Шаг за шагом прочесывал местность, даже русло реки, таща за собой на веревке два железных бруска и повторяя громким голосом заклинание Мелькиадеса. Единственное, что ему удалось обнаружить в недрах земных, были насквозь проржавевшие военные доспехи пятнадцатого века, глухо звякавшие при постукивании, как сухая тыква, начиненная камнями. Когда Хосе Аркадио Буэндия и его четверо помощников разобрали находку на части, под латами оказался белесый скелет, на темных позвонках которого болталась ладанка с женским локоном.
В марте цыгане пришли опять. На этот раз они принесли подзорную трубу и лупу величиной с бубен и выдавали их за последнее изобретение евреев из Амстердама. Они посадили в другом конце поселка свою цыганку, а трубу поставили у входа в шатер. Уплатив пять реалов, люди прилипали глазом к трубе и видели перед собой цыганку в мельчайших подробностях. «Для науки нет расстояний, – вещал Мелькиадес. – Скоро человек, не выходя из дому, увидит все, что творится в любом уголке земли». Однажды в жаркий полдень цыгане, манипулируя своей огромной лупой, устроили потрясающее зрелище: на охапку сена, брошенного среди улицы, они направили пучок солнечных лучей, и сено полыхнуло огнем. Хосе Аркадио Буэндия, который не мог успокоиться после провала своей затеи с магнитами, тотчас сообразил, что это стекло можно использовать как боевое оружие. Мелькиадес снова попытался отговорить его. Но в конечном счете цыган согласился отдать ему лупу в обмен на два магнита и три золотые колониальные монеты. Урсула рыдала от горя. Эти деньги пришлось вытаскивать из сундучка с золотыми дублонами, которые ее отец копил всю свою жизнь, отказывая себе в лишнем куске, и которые она хранила в дальнем углу под кроватью в надежде, что подвернется счастливый случай для их удачного применения. Хосе Аркадио Буэндия не соизволил даже утешить жену, отдавшись своим нескончаемым экспериментам с пылом истого исследователя и даже с риском для собственной жизни. Стремясь доказать губительное воздействие лупы на живую силу противника, он сфокусировал солнечные лучи на себе самом и получил сильнейшие ожоги, обратившиеся в язвы, которые с трудом заживали. Да что там, – он не пожалел бы и собственный дом, если бы не бурные протесты жены, устрашенной его опасными трюками. Долгие часы проводил Хосе Аркадио в своей комнате, рассчитывая стратегическую боеспособность новейшего оружия, и даже написал наставление, как его применять. Это удивительно доходчивое и неотразимо обоснованное наставление он отправил властям вместе с многочисленными описаниями своих опытов и несколькими рулонами пояснительных чертежей. Его гонец перебрался через горы, чудом вылез из бескрайней трясины, переплыл бурные реки, едва спасся от диких зверей и чуть не погиб от отчаяния и всякой заразы, прежде чем доплелся до дороги, где возили почту на мулах. Хотя поездка в столицу была по тем временам затеей почти нереальной, Хосе Аркадио Буэндия обещал приехать по первому распоряжению Правительства, чтобы продемонстрировать военным властям свое изобретение на практике и лично обучить их сложному искусству солнечных войн. Несколько лет ждал он ответа. Наконец, отчаявшись чего-нибудь дождаться, он поделился с Мелькиадесом своим горем, и тут цыган предъявил неоспоримое доказательство своей порядочности: забрав назад лупу, вернул ему золотые дублоны, да еще дал несколько португальских мореходных карт и кое-какие навигационные приборы. Цыган собственноручно написал для него краткий конспект поучений монаха Германа, как пользоваться астролябией, буссолью и секстантом. Хосе Аркадио Буэндия провел долгие месяцы дождливого сезона, запершись в сарае, специально пристроенном к дому, чтобы никто не мешал ему в его изысканиях. В сухую пору, полностью забросив домашние дела, он проводил ночи напролет в патио, наблюдая за ходом небесных тел, и едва не получил солнечный удар, стараясь точно определить зенит. Когда он в совершенстве овладел знаниями и инструментами, у него появилось блаженное ощущение необъятности пространства, что позволяло ему плавать по незнакомым морям и океанам, бывать на необитаемых землях и вступать в сношения с восхитительными созданиями, не покидая своего научного кабинета

Твой ответ:
{
"Макондо": "Небольшой поселок из двадцати глинобитных домишек с камышовыми кровлями, расположенных на берегу реки. Река несет свои прозрачные воды по ложу из белых, гладких и огромных, как доисторические яйца, валунов.",
"Цыганское племя": "Лохмотное, ежегодно приходящее в марте, ставит шатер близ поселка. Сопровождается звонким дребезжанием бубнов и визготней свистулек.",
"Мелькиадес": "Коренастый цыган с кудлатой бородой и воробьиными руками-лапками.",
"Хосе Аркадио Буэндия": "Обладает необузданным воображением, превосходящим чудотворный гений природы и силу магии. Склонен к экспериментам, даже с риском для жизни, и способен долго и упорно отстаивать свои идеи.",
"Урсула Игуаран": "Жена Хосе Аркадио Буэндии, заботящаяся о скромном семейном достатке и переживающая из-за трат мужа.",
"Военные доспехи": "Насквозь проржавевшие, пятнадцатого века, глухо звякающие при постукивании, как сухая тыква, начиненная камнями. Под латами находится белесый скелет, на темных позвонках которого болтается ладанка с женским локоном."
}
"""
# Функция для отправки запроса к Gemini
def query_gemini(prompt, api_key):
    genai.configure(api_key=api_key)
    model = genai.GenerativeModel('gemini-2.5-flash')
    response = model.generate_content(INSTRUCTION + "\n\n Текст для извлечения описаний:\n" + prompt)
    raw_text_response = response.text
    # print("RAW RESPONSE TEXT: ", raw_text_response) # Выводим полный необработанный ответ для отладки

    # Очистка ответа: извлекаем только JSON-строку
    # Используем регулярные выражения для поиска блока JSON
    # Этот шаблон ищет '```json' за которым следует любой текст (.*?) до '```'
    # re.DOTALL позволяет '.' соответствовать символам новой строки
    match = re.search(r'```json(.*?)```', raw_text_response, re.DOTALL)
    
    if match:
        json_string = match.group(1).strip() # Берем содержимое группы 1 и обрезаем пробелы
        # print("EXTRACTED JSON STRING (from markdown block): ", json_string)
    else:
        # Если блок '```json' не найден, предполагаем, что ответ - это чистый JSON
        json_string = raw_text_response.strip()
        # print("ASSUMED JSON STRING (no markdown block): ", json_string)
    
    return json_string # Возвращаем очищенную JSON-строку

# def query_openai(prompt, api_key):
#     client = openai.OpenAI(api_key=api_key)
#     try:
#         response = client.chat.completions.create(
#             model="gpt-3.5-turbo", # Используем gpt-3.5-turbo
#             messages=[
#                 {"role": "system", "content": "Ты помощник, который извлекает визуальные описания из текста."},
#                 {"role": "user", "content": prompt}
#             ],
#             response_format={"type": "json_object"} # Указываем, что ожидаем JSON
#         )
#         return response.choices[0].message.content
#     except Exception as e:
#         print(f"Ошибка при запросе к OpenAI: {e}")
#         return "{}" # Возвращаем пустой JSON в случае ошибки

# def query_groq(prompt, hf_token):
#     try:
#         client = InferenceClient(
#             provider="auto",
#             api_key=hf_token,
#         )

#         completion = client.chat.completions.create(
#             model="meta-llama/Meta-Llama-3-70B-Instruct", # You can change the model if needed
#             messages=[
#                     {
#                         "role": "system",
#                         "content": "Ты помощник, который извлекает визуальные описания из текста и **возвращает их СТРОГО в формате JSON, без какого-либо дополнительного текста или пояснений**. JSON должен содержать пары ключ-значение, где ключ - это имя или объект, а значение - его визуальное описание. Тебе на вход подаётся некоторый префикс книги. а тебе нужно извлечь из нее актуальные визуальные описания персонажей/объектов/мест вокруг которых в данный момент разворачивается действие/сцена, учти что, к примеру, если возраст некоторого персонажа указан лишь в начале книги, и в последней сцене персонаж принимает участие, описывая его, нужно обязательно написать его возраст. Визуальные описания могут меняться по ходу повествования, нужно извлекать актуальные."
#                     },
#                     {
#                         "role": "user",
#                         "content": prompt
#                     }
#                 ],
#         )
#         return completion.choices[0].message.content
#     except Exception as e:
#         print(f"Ошибка при запросе к Groq: {e}")
#         return ""

def build_prompt(text):
    return text

# Парсинг аргументов командной строки
parser = argparse.ArgumentParser(description='Оценка базовой модели с использованием Gemini API')
parser.add_argument('--api_key', type=str, required=True, help='API ключ для Gemini')
args = parser.parse_args()

# Используем переданный API ключ
api_key = args.api_key

# Пример основного цикла
results = []
for i, text in enumerate(cumulative_texts):
    prompt = build_prompt(text)
    # query_gemini теперь возвращает уже очищенную JSON-строку
    json_response_string = query_gemini(prompt, api_key) 
    
    print("Response string for parsing: ", json_response_string)
    # print("type(Response string): ", type(json_response_string))
    
    try:
        # Попытка парсинга очищенной строки
        parsed_response = json.loads(json_response_string)
    except json.JSONDecodeError as e:
        print(f"ОШИБКА ПРИ ПАРСИНГЕ JSON: {e}")
        print(f"Проблемная строка: '{json_response_string}'")
        parsed_response = {} # Возвращаем пустой словарь в случае ошибки парсинга
    
    results.append(parsed_response)
# os.environ['HTTPS_PROXY'] = ""
# os.environ['HTTP_PROXY'] = ""

# Сохраняем результаты для последующей оценки
with open('groq_results.json', 'w', encoding='utf-8') as f:
    json.dump(results, f, ensure_ascii=False, indent=2)


key_matching_scores, description_matching_scores = calculate_scores(gold_descriptions, results)
print()
print("Semantic similarity score after key matching:", key_matching_scores)
print("Average score after key matching:", sum(key_matching_scores) / len(key_matching_scores))
print()
print("Semantic similarity score after description matching:", description_matching_scores)
print("Average score after description matching:", sum(description_matching_scores) / len(description_matching_scores))
